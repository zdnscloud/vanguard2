// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `rrset.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct RRset {
    // message fields
    pub name: ::std::string::String,
    pub field_type: RRType,
    pub ttl: u32,
    pub rdatas: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RRset {
    fn default() -> &'a RRset {
        <RRset as ::protobuf::Message>::default_instance()
    }
}

impl RRset {
    pub fn new() -> RRset {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .client.RRType type = 2;


    pub fn get_field_type(&self) -> RRType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = RRType::A;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: RRType) {
        self.field_type = v;
    }

    // uint32 ttl = 3;


    pub fn get_ttl(&self) -> u32 {
        self.ttl
    }
    pub fn clear_ttl(&mut self) {
        self.ttl = 0;
    }

    // Param is passed by value, moved
    pub fn set_ttl(&mut self, v: u32) {
        self.ttl = v;
    }

    // repeated string rdatas = 4;


    pub fn get_rdatas(&self) -> &[::std::string::String] {
        &self.rdatas
    }
    pub fn clear_rdatas(&mut self) {
        self.rdatas.clear();
    }

    // Param is passed by value, moved
    pub fn set_rdatas(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.rdatas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rdatas(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.rdatas
    }

    // Take field
    pub fn take_rdatas(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.rdatas, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RRset {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ttl = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.rdatas)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.field_type != RRType::A {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if self.ttl != 0 {
            my_size += ::protobuf::rt::value_size(3, self.ttl, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.rdatas {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.field_type != RRType::A {
            os.write_enum(2, self.field_type.value())?;
        }
        if self.ttl != 0 {
            os.write_uint32(3, self.ttl)?;
        }
        for v in &self.rdatas {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RRset {
        RRset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &RRset| { &m.name },
                    |m: &mut RRset| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RRType>>(
                    "type",
                    |m: &RRset| { &m.field_type },
                    |m: &mut RRset| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "ttl",
                    |m: &RRset| { &m.ttl },
                    |m: &mut RRset| { &mut m.ttl },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rdatas",
                    |m: &RRset| { &m.rdatas },
                    |m: &mut RRset| { &mut m.rdatas },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RRset>(
                    "RRset",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RRset {
        static mut instance: ::protobuf::lazy::Lazy<RRset> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RRset,
        };
        unsafe {
            instance.get(RRset::new)
        }
    }
}

impl ::protobuf::Clear for RRset {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type = RRType::A;
        self.ttl = 0;
        self.rdatas.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RRset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RRset {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RRsetHeader {
    // message fields
    pub name: ::std::string::String,
    pub field_type: RRType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RRsetHeader {
    fn default() -> &'a RRsetHeader {
        <RRsetHeader as ::protobuf::Message>::default_instance()
    }
}

impl RRsetHeader {
    pub fn new() -> RRsetHeader {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .client.RRType type = 2;


    pub fn get_field_type(&self) -> RRType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = RRType::A;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: RRType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for RRsetHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.field_type != RRType::A {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.field_type != RRType::A {
            os.write_enum(2, self.field_type.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RRsetHeader {
        RRsetHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &RRsetHeader| { &m.name },
                    |m: &mut RRsetHeader| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RRType>>(
                    "type",
                    |m: &RRsetHeader| { &m.field_type },
                    |m: &mut RRsetHeader| { &mut m.field_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RRsetHeader>(
                    "RRsetHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RRsetHeader {
        static mut instance: ::protobuf::lazy::Lazy<RRsetHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RRsetHeader,
        };
        unsafe {
            instance.get(RRsetHeader::new)
        }
    }
}

impl ::protobuf::Clear for RRsetHeader {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type = RRType::A;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RRsetHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RRsetHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RRType {
    A = 0,
    AAAA = 1,
    NS = 2,
    SOA = 3,
    CNAME = 4,
    MX = 5,
    TXT = 6,
    SRV = 7,
    PTR = 8,
}

impl ::protobuf::ProtobufEnum for RRType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RRType> {
        match value {
            0 => ::std::option::Option::Some(RRType::A),
            1 => ::std::option::Option::Some(RRType::AAAA),
            2 => ::std::option::Option::Some(RRType::NS),
            3 => ::std::option::Option::Some(RRType::SOA),
            4 => ::std::option::Option::Some(RRType::CNAME),
            5 => ::std::option::Option::Some(RRType::MX),
            6 => ::std::option::Option::Some(RRType::TXT),
            7 => ::std::option::Option::Some(RRType::SRV),
            8 => ::std::option::Option::Some(RRType::PTR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RRType] = &[
            RRType::A,
            RRType::AAAA,
            RRType::NS,
            RRType::SOA,
            RRType::CNAME,
            RRType::MX,
            RRType::TXT,
            RRType::SRV,
            RRType::PTR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RRType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RRType {
}

impl ::std::default::Default for RRType {
    fn default() -> Self {
        RRType::A
    }
}

impl ::protobuf::reflect::ProtobufValue for RRType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0brrset.proto\x12\x06client\"i\n\x05RRset\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x12\"\n\x04type\x18\x02\x20\x01(\x0e2\x0e.client.RR\
    TypeR\x04type\x12\x10\n\x03ttl\x18\x03\x20\x01(\rR\x03ttl\x12\x16\n\x06r\
    datas\x18\x04\x20\x03(\tR\x06rdatas\"E\n\x0bRRsetHeader\x12\x12\n\x04nam\
    e\x18\x01\x20\x01(\tR\x04name\x12\"\n\x04type\x18\x02\x20\x01(\x0e2\x0e.\
    client.RRTypeR\x04type*X\n\x06RRType\x12\x05\n\x01A\x10\0\x12\x08\n\x04A\
    AAA\x10\x01\x12\x06\n\x02NS\x10\x02\x12\x07\n\x03SOA\x10\x03\x12\t\n\x05\
    CNAME\x10\x04\x12\x06\n\x02MX\x10\x05\x12\x07\n\x03TXT\x10\x06\x12\x07\n\
    \x03SRV\x10\x07\x12\x07\n\x03PTR\x10\x08b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
